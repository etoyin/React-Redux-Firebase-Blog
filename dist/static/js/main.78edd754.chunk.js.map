{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authAction.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notification.js","components/posts/PostSummary.js","components/posts/PostList.js","components/dashboard/Dashboard.js","components/posts/PostDetails.js","store/actions/commentsAction.js","store/actions/likeAction.js","components/auth/SignIn.js","components/auth/SignUp.js","components/posts/CreatePost.js","store/actions/postAction.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/postReducer.js","store/reducers/commentsReducer.js","store/reducers/likeReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","_ref2","getFirebase","auth","then","type","props","react_default","a","createElement","class","react_router_dom","to","href","onClick","className","profile","initials","SignedOutLinks","state","firebase","links","uid","layout_SignedInLinks","layout_SignedOutLinks","Notification","_ref","notifications","console","log","map","notification","key","id","user","content","moment","time","toDate","fromNow","PostSummary","post","title","author","createdAt","toString","PostList","posts","posts_PostSummary","Dashboard","_this$props","this","posts_PostList","dashboard_Notification","react_router","Component","compose","firestore","ordered","firestoreConnect","collection","orderBy","limit","PostDetails","like","contentValid","addLike","_this","setState","postId","match","params","setTimeout","likePost","handleChange","e","value","target","name","Object","defineProperty","validateContent","fieldName","length","handleSubmit","preventDefault","createComments","currentUserProfile","likes","includes","comments","comment","index","onSubmit","cols","rows","onChange","disabled","thisProps","data","getFirestore","doc","update","FieldValue","arrayUnion","firstName","lastName","Date","catch","err","currentUserId","likeStatus","arrayRemove","SignIn","email","password","esm_defineProperty","signIn","authErr","htmlFor","credentials","signInWithEmailAndPassword","SignUp","confirm_password","formErrors","fNameValid","lNameValid","emailValid","passwordValid","passwordMatch","formValid","validateInput","validateForm","signUp","SignUp_FormErrors","FormErrors","keys","i","newUser","_ref3","createUserWithEmailAndPassword","res","set","CreatePost","postErrors","titleValid","postFormValid","validatePost","createPosts","history","push","CreatePost_PostFormErrors","PostFormErrors","add","objectSpread","App","layout_Navbar","exact","path","component","Boolean","window","location","hostname","initState","authReducer","arguments","undefined","action","message","postReducer","commentsReducer","likeReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78edd754.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { signOut} from '../../store/actions/authAction'\r\n\r\n\r\nconst SignedInLinks = (props) => {\r\n    return(\r\n        <ul class=\"right\">\r\n            <li><NavLink to=\"/create\">New Post</NavLink></li>\r\n            <li><a href='' onClick={props.signOut}>Log Out</a></li>\r\n            <li><i class=\"fa fa-bell btn btn-floating pink lighten-1\"></i></li>\r\n            <li><NavLink to=\"/\" className=\"btn btn-floating pink lighten-1\">{props.profile.initials}</NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signOut: () => {\r\n            dispatch(signOut())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","\r\nexport const signIn = (credentials) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then(() => {\r\n            dispatch({type: 'LOGIN_SUCCESS'})\r\n        }).catch((err) => {\r\n            dispatch({type: 'LOGIN_ERROR', err: err})            \r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const signOut = () => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({type: 'SIGNOUT_SUCCESS'})\r\n        })\r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then((res) => {\r\n            return firestore.collection('users').doc(res.user.uid).set({\r\n                firstName: newUser.firstName,\r\n                lastName: newUser.lastName,\r\n                initials: newUser.firstName[0] + newUser.lastName[0]\r\n            })\r\n            //console.log(res);\r\n        }).then(() => {\r\n            dispatch({type: 'SIGNUP_SUCCESS'})\r\n        }).catch((err) => {\r\n            dispatch({type: 'SIGNUP_ERROR', err: err})            \r\n        })\r\n\r\n    }\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SignedOutLinks = () => {\r\n    return(\r\n        <ul class=\"right\">\r\n            <li><NavLink to=\"/signup\">Sign Up</NavLink></li>\r\n            <li><NavLink to=\"/signin\">Login</NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedOutLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nimport { connect } from 'react-redux';\r\nimport SignedOutLinks from './SignedOutLinks';\r\n\r\nconst Navbar = (props) => {\r\n    const { auth, profile } = props;\r\n    const links = auth.uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks />\r\n    return(\r\n        <nav className=\"nav-wrapper grey darken-3\">\r\n            <div className=\"container\">\r\n                <Link to=\"/\" className=\"brand-logo\">Icon.com</Link>\r\n                { links }\r\n            </div>\r\n        </nav>)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log(state);\r\n    return {\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar);","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Notification = ({notifications}) => {\r\n    console.log(\"notifications added\",notifications);\r\n    return(\r\n        <div className='section'>\r\n            <div className='card z-depth-0'>\r\n                <div className='card-content'>\r\n                    <span className='card-title'>Notifications</span>\r\n                    <ul>\r\n                        {\r\n                            notifications && notifications.map(notification => {\r\n                                return <li key={notification.id}>\r\n                                            <span className='pink-text'>{notification.user} </span>\r\n                                            <span>{notification.content}</span>\r\n                                            <div className='grey-text note-date'>\r\n                                                {\r\n                                                    moment(notification.time.toDate()).fromNow()\r\n                                                }\r\n                                            </div>\r\n                                        </li>\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\n\r\nconst PostSummary = ({post}) => {\r\n    return(\r\n        <div className=\"card z-depth-0 post-summary\">\r\n            <div className=\"card-content grey-text text-darken-3\">\r\n                <span className=\"card-title\">{post.title}</span>\r\n                <p>Posted By {post.author}</p>\r\n                <p className=\"grey-text\">{post.createdAt.toDate().toString()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostSummary;","import React from 'react';\r\nimport PostSummary from './PostSummary';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PostList = ({posts}) => {\r\n    return(\r\n        <div className=\"post-list section\">\r\n            {/** If posts are available, then map through it, else dont. */}\r\n            {posts && posts.map((post) => {\r\n                return (\r\n                    <Link to={'/post/' + post.id} key={post.id}>\r\n                        <PostSummary post={post} />\r\n                    </Link>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostList;","import React, {Component} from 'react';\r\nimport Notification from './Notification';\r\nimport PostList from '../posts/PostList';\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Dashboard extends Component{\r\n    render(){\r\n        //console.log(this.props);\r\n        const { posts, auth, notifications } = this.props;\r\n        console.log('notifications',notifications);\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n        return(\r\n            <div className=\"dashboard container\">\r\n                <div className=\"row\">\r\n                    {/** postlist component */}\r\n                    <div className=\"col s12 m6\">\r\n                        <PostList posts={posts}/>\r\n                    </div>\r\n                    {/** notification component */}\r\n                    <div className=\"col s12 m5 offset-m1\">\r\n                        <Notification notifications={notifications} />\r\n                    </div>\r\n                </div>\r\n            </div>        \r\n        )\r\n    }\r\n}\r\n// this maps the state from store to the props of the dashboard.\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return {\r\n        posts: state.firestore.ordered.posts,\r\n        auth: state.firebase.auth,\r\n        notifications: state.firestore.ordered.notifications\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        { collection: 'posts', orderBy: ['createdAt', 'desc']},\r\n        { collection: 'notifications', limit: 3, orderBy: ['time', 'desc']}\r\n    ])\r\n)(Dashboard);","import React, { Component } from 'react';\r\nimport { createComments} from '../../store/actions/commentsAction';\r\nimport { connect } from 'react-redux';\r\nimport { likePost } from '../../store/actions/likeAction'\r\nimport { compose } from 'redux';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass PostDetails extends Component {\r\n    state = {\r\n        content: '',\r\n        like: false,\r\n        contentValid: false\r\n    }\r\n    /*componentDidMount(){\r\n        setTimeout(() => {\r\n            console.log(this.props.post);            \r\n            //the setTimeOut delays this.props.likePost function so that the state will be set before it.\r\n            //we need to pass i the id so as to pass it in the likeAction\r\n            this.setState({\r\n                like: this.props.post.likes.includes('myId')\r\n            })\r\n        }, 1000);\r\n        \r\n    }*/\r\n    addLike = () => {\r\n        this.setState({\r\n            like: !this.state.like\r\n        });\r\n        const postId = this.props.match.params.id\r\n        //passing in only the like property of state\r\n        setTimeout(() => {\r\n            //the setTimeOut delays this.props.likePost function so that the state will be set before it.\r\n            //we need to pass i the id so as to pass it in the likeAction\r\n            // this.props.auth.uid is the current user Id which needs to be added to the like array in the likeAction\r\n            console.log(this.props.auth.uid);\r\n            this.props.likePost(this.state.like, postId, this.props.auth.uid)\r\n        }, 1);\r\n    }\r\n    handleChange = (e) => {\r\n        const value = e.target.value;\r\n        const name = e.target.name;\r\n        this.setState({\r\n            [name]: value\r\n        }, () => {\r\n            this.validateContent(name, value)\r\n        })\r\n    }\r\n    validateContent = (fieldName, value) => {\r\n        let contentValid = this.state.contentValid;\r\n        if (fieldName === 'content'){\r\n            contentValid = value.length > 2;\r\n        }\r\n        this.setState({contentValid: contentValid})\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.setState({\r\n            content: ''\r\n        })\r\n        //console.log(this.state.content);\r\n        const id = this.props.match.params.id;\r\n        //we need to pass i the id so as to know which post to store the comments in the commentsAction\r\n        //we can get the name of the person commenting from the profile object\r\n        this.props.createComments(this.state.content, id, this.props.currentUserProfile);\r\n    }\r\n    render () {\r\n        const { post, auth } = this.props;\r\n        //console.log(auth.uid);\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n        if(post){\r\n            return (\r\n                <div className=\"container section post-details\">\r\n                    <div className=\"card z-depth-0 content\">\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title\"><bold>{post.title}</bold></span>\r\n                            <p className='flow-text'>{post.content}</p>\r\n                        </div>\r\n                        <div className=\"card-action grey lighten-4 grey-text\">\r\n                            <div>Posted By {post.author}</div>\r\n                            <div>{post.createdAt.toDate().toString()}</div>\r\n                            \r\n                        </div>\r\n                        <div className=\"card-action grey lighten-4\">\r\n                        <i onClick={this.addLike} class=\"material-icons\">{(this.state.like || post.likes.includes(auth.uid) ? 'favorite' : 'favorite_border')}</i><span className=\"noOfLikes\">{post.likes.length}</span>\r\n                            {\r\n                                post && post.comments.map((comment, index) => {\r\n                                    return (\r\n                                        <div key={index}>\r\n                                            <p>{comment.content}</p>\r\n                                            <p className='grey-text text-darken-5'><em> - {comment.author}</em></p>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <label>Comments</label>\r\n                                <textarea id=\"comments\" name='content' cols=\"30\" rows=\"10\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\r\n                                <button disabled={!this.state.contentValid} className=\"btn\">Add Comments</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"container center card-content\">\r\n                    <p>Loading .......</p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, thisProps) => {\r\n    const id = thisProps.match.params.id;  \r\n    const posts = state.firestore.data.posts;\r\n    const post = posts ? posts[id] : null;\r\n    //console.log(post);\r\n    return {\r\n        post: post,\r\n        auth: state.firebase.auth,\r\n        currentUserProfile: state.firebase.profile,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createComments: (comment, id, currentUserProfile) => {\r\n            dispatch(createComments(comment, id, currentUserProfile));\r\n        },\r\n        likePost: (like, id, currentUserId) => {\r\n            dispatch(likePost(like, id, currentUserId));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    firestoreConnect([\r\n        { collection: 'posts'}\r\n    ])\r\n)(PostDetails);\r\n","\r\nexport const createComments = (comment, postId, currentUserProfile) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n        firestore.collection('posts').doc(postId).update({\r\n            comments: firebase.firestore.FieldValue.arrayUnion({\r\n                content: comment,\r\n                author: currentUserProfile.firstName + ' ' + currentUserProfile.lastName,\r\n                createdAt: new Date()})\r\n\r\n            // then fuction is fired only after the returned function is through \r\n            //with talk in to the database.\r\n        }).then(() => {\r\n            dispatch({type: 'CREATE_COMMENTS', comment: comment})\r\n        }).catch((err) => {\r\n            dispatch({type: 'CREATE_COMMENTS_ERR', err: err})            \r\n        })\r\n\r\n    }\r\n}","\r\nexport const likePost = (likeStatus, postId, currentUserId) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n        console.log(currentUserId);\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n        firestore.collection('posts').doc(postId).update({\r\n            likes: (likeStatus ? firebase.firestore.FieldValue.arrayUnion(currentUserId) : firebase.firestore.FieldValue.arrayRemove(currentUserId))\r\n\r\n            // then fuction is fired only after the returned function is through \r\n            //with talk in to the database.\r\n        }).then(() => {\r\n            dispatch({type: 'LIKE_POST', like: likeStatus})\r\n        }).catch((err) => {\r\n            dispatch({type: 'LIKE_POST_ERR', err: err})            \r\n        })\r\n\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signIn } from '../../store/actions/authAction';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass SignIn extends Component {\r\n    state = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state)\r\n        this.props.signIn(this.state);\r\n    }\r\n    render() {\r\n        //console.log(this.props);\r\n        const { authErr, auth } = this.props;\r\n        if (auth.uid) return <Redirect to='/' />\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Sign In</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\r\n                    </div>\r\n                    <div className='center red-text'>\r\n                        {\r\n                            authErr ? <p>{authErr}</p> : null\r\n                        }\r\n                    </div>\r\n                </form>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log(state);\r\n    return{\r\n        authErr: state.auth.authErr,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return{\r\n        signIn: (params) => {\r\n            dispatch(signIn(params))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { signUp } from '../../store/actions/authAction';\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        confirm_password: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        formErrors: {firstName: '', lastName: '', email: '', password: '', confirm_password: ''},\r\n        fNameValid: false,\r\n        lNameValid: false,\r\n        emailValid: false,\r\n        passwordValid: false,\r\n        passwordMatch: false,\r\n        formValid: false\r\n    }\r\n    handleChange = (e) => {\r\n        const id = e.target.id;\r\n        const value = e.target.value;\r\n        this.setState({\r\n            [id] : value\r\n        }, () => {\r\n            this.validateInput(id, value)\r\n        })\r\n        console.log(this.state.fNameValid);\r\n        console.log(this.state.lNameValid);\r\n        console.log(this.state.emailValid);\r\n        console.log(this.state.passwordValid);\r\n        console.log(this.state.passwordMatch);\r\n    }\r\n    validateInput = (fieldName, value) => {\r\n        let formErrors = this.state.formErrors;\r\n        let emailValid = this.state.emailValid;\r\n        let passwordValid = this.state.passwordValid;\r\n        let passwordMatch = this.state.passwordMatch;\r\n        let fNameValid = this.state.fNameValid;\r\n        let lNameValid = this.state.lNameValid;\r\n\r\n        switch(fieldName){\r\n            case 'firstName':\r\n                fNameValid = value.length > 2;\r\n                formErrors.firstName = fNameValid ? '' : 'First Name must be more than 2 characters';\r\n                break;\r\n            case 'lastName':\r\n                lNameValid = value.length > 2;\r\n                formErrors.firstName = lNameValid ? '' : 'Last Name must be more than 2 characters';\r\n                break;\r\n            case 'email':\r\n                emailValid = value.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i);\r\n                formErrors.email = emailValid ? '' : 'email is invalid';\r\n                break;\r\n            case 'password': \r\n                passwordValid = value.length >= 6;\r\n                formErrors.password = passwordValid ? '' : 'password must be 6 or more characters';\r\n                break;\r\n            case 'confirm_password':\r\n                passwordMatch = value === this.state.password;\r\n                formErrors.confirm_password = passwordMatch ? '' : 'confirm password must match password';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            fNameValid: fNameValid,\r\n            lNameValid: lNameValid,\r\n            formErrors: formErrors,\r\n            emailValid: emailValid,\r\n            passwordValid: passwordValid,\r\n            passwordMatch: passwordMatch\r\n        }, this.validateForm)\r\n    }\r\n    validateForm = () => {\r\n        this.setState({formValid: \r\n            this.state.fNameValid && \r\n            this.state.lNameValid && \r\n            this.state.emailValid && \r\n            this.state.passwordValid && \r\n            this.state.passwordMatch});\r\n    }\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.signUp(this.state)\r\n    }\r\n    render() {\r\n        const { auth, authErr } = this.props;\r\n        if (auth.uid) return <Redirect to='/' />\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input type=\"text\" id=\"firstName\" className='validate' onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input type=\"text\" id=\"lastName\" className='validate' onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" className='validate' onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input className='validate' type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"Confirm_password\">Confirm Password</label>\r\n                        <input type=\"password\" id=\"confirm_password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\" disabled={!this.state.formValid}>SignUp</button>\r\n                    </div>\r\n                    <div className='center red-text'>\r\n                        {\r\n                            authErr ? <p>{authErr}</p> : null\r\n                        }\r\n                    </div>\r\n                    <div className='center red-text'>\r\n                        <FormErrors formErrors={this.state.formErrors} />                    \r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst FormErrors = ({formErrors}) => {\r\n    return(\r\n        <div className='formErrors'>\r\n            {\r\n                Object.keys(formErrors).map((fieldName, i) => {\r\n                    if(formErrors[fieldName].length > 0){\r\n                        return (\r\n                            <p key={i}>{formErrors[fieldName]}</p>\r\n                        )\r\n                    }\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        authErr: state.auth.authErr\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signUp: (newUser) => {\r\n            dispatch(signUp(newUser))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\r\n","import React, { Component } from 'react'\r\nimport { createPosts } from '../../store/actions/postAction'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nclass CreatePost extends Component {\r\n    state = {\r\n        title: '',\r\n        content: '',\r\n        postErrors: { title: '', content: ''},\r\n        titleValid: false,\r\n        contentValid: false,\r\n        postFormValid: false\r\n\r\n    }\r\n    handleChange = (e) => {\r\n        const id = e.target.id;\r\n        const value = e.target.value\r\n        this.setState({\r\n            [id] : value\r\n        }, () => {\r\n            this.validateInput(id, value);\r\n        })\r\n    }\r\n    validateInput = (fieldName, value) => {\r\n        let titleValid = this.state.titleValid;\r\n        let contentValid = this.state.contentValid;\r\n        let postErrors = this.state.postErrors;\r\n\r\n        switch(fieldName){\r\n            case 'title':\r\n                titleValid = value.length > 2;\r\n                postErrors.title = titleValid ? '' : 'The Post title must be more than 2 characters';\r\n                break;\r\n            case 'content':\r\n                contentValid = value.length >= 20;\r\n                postErrors.content = contentValid ? '' : 'The Post content must be more or equal to 20 characters';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.setState({\r\n            titleValid: titleValid,\r\n            contentValid: contentValid,\r\n            postErrors: postErrors\r\n        }, this.validatePost)\r\n    }\r\n    validatePost = () => {\r\n        this.setState({\r\n            postFormValid: this.state.titleValid && this.state.contentValid\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state)\r\n        this.props.createPosts(this.state, this.props.currentUserProfile);\r\n        this.props.history.push('/');\r\n    }\r\n    render() {\r\n        const { auth } = this.props;\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Create New Post</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <input type=\"text\" id=\"title\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"content\">Post Content</label>\r\n                        <textarea id=\"content\" cols=\"30\" rows=\"10\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\" disabled={!this.state.postFormValid}>Create</button>\r\n                    </div>\r\n                    <div className='center red-text'>\r\n                        <PostFormErrors postErrors={this.state.postErrors} />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst PostFormErrors = ({postErrors}) => {\r\n    return (\r\n        <div>\r\n            {\r\n                Object.keys(postErrors).map((fieldName, i) => {\r\n                    if(postErrors[fieldName].length > 0){\r\n                        return <p key={i}>{postErrors[fieldName]}</p>\r\n                    }\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createPosts: (post, currentUserProfile) => {\r\n            dispatch(createPosts(post, currentUserProfile))\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        currentUserProfile: state.firebase.profile\r\n    }\r\n}\r\n\r\n//mapStateToProps is the first parameter of connect but we are not getting any state here\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost);\r\n","export const createPosts = (post, currentUserProfile) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firestore = getFirestore();\r\n        firestore.collection('posts').add({\r\n            ...post,\r\n            comments:[],\r\n            likes: [],\r\n            author: currentUserProfile.firstName + ' ' + currentUserProfile.lastName,\r\n            createdAt: new Date()\r\n            // then fuction is fired only after the returned function is through \r\n            //with talk in to the database.\r\n        }).then(() => {\r\n            dispatch({type: 'CREATE_POSTS', post: post})\r\n        }).catch((err) => {\r\n            dispatch({type: 'CREATE_POSTS_ERR', err: err})            \r\n        })\r\n\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from './components/layout/Navbar';\r\nimport Dashboard from './components/dashboard/Dashboard';\r\nimport PostDetails from './components/posts/PostDetails';\r\nimport SignIn from './components/auth/SignIn';\r\nimport SignUp from './components/auth/SignUp';\r\nimport CreatePost from './components/posts/CreatePost';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Navbar/>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Dashboard} />\r\n          <Route path=\"/post/:id\" component={PostDetails} />\r\n          <Route path=\"/signin\" component={SignIn} />\r\n          <Route path=\"/signup\" component={SignUp} />\r\n          <Route path=\"/create\" component={CreatePost} />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initState = {\r\n    authErr: null\r\n}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case 'LOGIN_ERROR':\r\n            console.log('Login Failed');\r\n            return{\r\n                ...state,\r\n                authErr: 'Login Failed'\r\n            }\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('Login Passed');\r\n            return{\r\n                ...state,\r\n                authErr: null\r\n            }\r\n        case 'SIGNOUT_SUCCESS':\r\n            console.log('Signout Success');\r\n            return state\r\n        case 'SIGNUP_SUCCESS':\r\n            console.log('Signed Up Success');\r\n            return{\r\n                ...state,\r\n                authErr: null\r\n            }\r\n        case 'SIGNUP_ERROR':\r\n            console.log('signup failed');\r\n            return{\r\n                ...state,\r\n                authErr: action.err.message\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer;","const initState = {\r\n    posts: [  \r\n        {'id': 1, 'title': 'HeLLo', 'content': 'a thio ghyg dfer nfyjdm '},\r\n        {'id': 2, 'title': 'Worldo', 'content': 'a thio ghyg dfer nfyjdm '},\r\n        {'id': 3, 'title': 'Yeyh!!', 'content': 'a thio ghyg dfer nfyjdm '}\r\n    ]\r\n\r\n}\r\n\r\nconst postReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case 'CREATE_POSTS':\r\n            console.log('Created Posts', action.post);\r\n            return state;\r\n        case 'CREATE_POSTS_ERR':\r\n            console.log('Create Posts Error', action.err);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;\r\n","const initState = {\r\n    comments: [  \r\n        {'id': 1, 'content': 'a thio ghyg dfer nfyjdm '},\r\n        {'id': 2, 'content': 'a thio ghyg dfer nfyjdm '},\r\n        {'id': 3, 'content': 'a thio ghyg dfer nfyjdm '}\r\n    ]\r\n\r\n}\r\n\r\nconst commentsReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case 'CREATE_COMMENTS':\r\n            console.log('Created', action.comment);\r\n            return state;\r\n        case 'CREATE_COMMENTS_ERR':\r\n            console.log('Create Posts Error', action.err);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default commentsReducer;\r\n","const initState = {\r\n    like: false\r\n}\r\n\r\nconst likeReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case 'LIKE_POST':\r\n            console.log('Created like', action.like);\r\n            return state;\r\n        case 'LIKE_POST_ERR':\r\n            console.log('Create like Error', action.err);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default likeReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport postReducer from \"./postReducer\";\r\nimport commentsReducer from './commentsReducer';\r\nimport likeReducer from \"./likeReducer\";\r\n//this reducer is made for syncing our firestore data with the state in the background.\r\nimport { firestoreReducer } from 'redux-firestore'\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    post: postReducer,\r\n    comment: commentsReducer,\r\n    like: likeReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n})\r\n\r\nexport default rootReducer;","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBWTSejLucoeFsGe_BVMH_WqV2D37vEACo\",\r\n    authDomain: \"my-react-blog-44ca8.firebaseapp.com\",\r\n    databaseURL: \"https://my-react-blog-44ca8.firebaseio.com\",\r\n    projectId: \"my-react-blog-44ca8\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"1037862403870\",\r\n    appId: \"1:1037862403870:web:4dc3dedfb113bef6ae530f\",\r\n    measurementId: \"G-G9CX8YD6VS\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  //firebase.analytics();\r\n  firebase.firestore().settings({timestampsInSnapshots: true});\r\n\r\n  export default firebase;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './store/reducers/rootReducer';\r\nimport { Provider } from 'react-redux';\r\n//thunk is middleware that halts dispatch action, performs async req and then resumes dispatch\r\nimport thunk from 'redux-thunk';\r\nimport { reduxFirestore, getFirestore} from 'redux-firestore';\r\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\r\nimport fbConfig from './config/fbConfig';\r\n\r\n\r\n\r\nconst store = createStore(rootReducer, \r\n    compose(\r\n        //these are the store enhancers!!!\r\n        applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\r\n        //pass our config file to connect to the config\r\n        reduxFirestore(fbConfig),\r\n        //attachauthisready will allow us to access a method called firebaseAuthIsReady\r\n        //useFirestoreForProfile: true, userProfile: 'users', allows us to sync firebase profile to firestore users\r\n        reactReduxFirebase(fbConfig, { useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true })\r\n    )\r\n);\r\n\r\n//firebaseAuthIsReady waits for our app to check for authentication and then calls a callback function that renders our page\r\nstore.firebaseAuthIsReady.then(() => {\r\n    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n    // If you want your app to work offline and load faster, you can change\r\n    // unregister() to register() below. Note this comes with some pitfalls.\r\n    // Learn more about service workers: https://bit.ly/CRA-PWA\r\n    serviceWorker.unregister();\r\n\r\n})\r\n\r\n"],"sourceRoot":""}