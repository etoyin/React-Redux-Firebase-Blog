{"version":3,"sources":["components/layout/SignedInLinks.js","store/actions/authAction.js","components/layout/SignedOutLinks.js","components/layout/Navbar.js","components/dashboard/Notification.js","components/posts/PostSummary.js","components/posts/PostList.js","components/dashboard/Dashboard.js","components/posts/PostDetails.js","store/actions/commentsAction.js","store/actions/likeAction.js","components/auth/SignIn.js","components/auth/SignUp.js","components/posts/CreatePost.js","store/actions/postAction.js","App.js","serviceWorker.js","store/reducers/authReducer.js","store/reducers/postReducer.js","store/reducers/commentsReducer.js","store/reducers/likeReducer.js","store/reducers/rootReducer.js","config/fbConfig.js","index.js"],"names":["connect","dispatch","signOut","getState","_ref2","getFirebase","auth","then","type","props","react_default","a","createElement","class","react_router_dom","to","href","onClick","profile","initials","SignedOutLinks","state","firebase","links","uid","layout_SignedInLinks","layout_SignedOutLinks","className","Notification","PostSummary","_ref","post","title","author","createdAt","toDate","toString","PostList","posts","map","id","key","posts_PostSummary","Dashboard","_this$props","this","posts_PostList","dashboard_Notification","react_router","Component","compose","console","log","firestore","ordered","firestoreConnect","collection","PostDetails","content","like","addLike","_this","setState","postId","match","params","setTimeout","likePost","handleChange","e","target","value","handleSubmit","preventDefault","createComments","currentUserProfile","likes","includes","length","comments","comment","index","onSubmit","cols","rows","onChange","thisProps","data","getFirestore","doc","update","FieldValue","arrayUnion","firstName","lastName","Date","catch","err","currentUserId","likeStatus","arrayRemove","SignIn","email","password","Object","defineProperty","signIn","authErr","htmlFor","credentials","signInWithEmailAndPassword","SignUp","signUp","newUser","_ref3","createUserWithEmailAndPassword","res","user","set","CreatePost","createPosts","history","push","add","objectSpread","App","layout_Navbar","exact","path","component","Boolean","window","location","hostname","initState","authReducer","arguments","undefined","action","message","postReducer","commentsReducer","likeReducer","rootReducer","combineReducers","firestoreReducer","firebaseReducer","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","settings","timestampsInSnapshots","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","fbConfig","reactReduxFirebase","useFirestoreForProfile","userProfile","attachAuthIsReady","firebaseAuthIsReady","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a129ffc.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { signOut} from '../../store/actions/authAction'\r\n\r\n\r\nconst SignedInLinks = (props) => {\r\n    return(\r\n        <ul class=\"right\">\r\n            <li><NavLink to=\"/create\">New Post</NavLink></li>\r\n            <li><a href='' onClick={props.signOut}>Log Out</a></li>\r\n            <li><NavLink to=\"/\" class=\"btn btn-floating pink lighten-1\">{props.profile.initials}</NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signOut: () => {\r\n            dispatch(signOut())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(SignedInLinks);","\r\nexport const signIn = (credentials) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signInWithEmailAndPassword(\r\n            credentials.email,\r\n            credentials.password\r\n        ).then(() => {\r\n            dispatch({type: 'LOGIN_SUCCESS'})\r\n        }).catch((err) => {\r\n            dispatch({type: 'LOGIN_ERROR', err: err})            \r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const signOut = () => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase}) => {\r\n        const firebase = getFirebase();\r\n        firebase.auth().signOut().then(() => {\r\n            dispatch({type: 'SIGNOUT_SUCCESS'})\r\n        })\r\n    }\r\n}\r\n\r\nexport const signUp = (newUser) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n        firebase.auth().createUserWithEmailAndPassword(\r\n            newUser.email,\r\n            newUser.password\r\n        ).then((res) => {\r\n            return firestore.collection('users').doc(res.user.uid).set({\r\n                firstName: newUser.firstName,\r\n                lastName: newUser.lastName,\r\n                initials: newUser.firstName[0] + newUser.lastName[0]\r\n            })\r\n            //console.log(res);\r\n        }).then(() => {\r\n            dispatch({type: 'SIGNUP_SUCCESS'})\r\n        }).catch((err) => {\r\n            dispatch({type: 'SIGNUP_ERROR', err: err})            \r\n        })\r\n\r\n    }\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst SignedOutLinks = () => {\r\n    return(\r\n        <ul class=\"right\">\r\n            <li><NavLink to=\"/signup\">Sign Up</NavLink></li>\r\n            <li><NavLink to=\"/signin\">Login</NavLink></li>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default SignedOutLinks;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport SignedInLinks from './SignedInLinks';\r\nimport { connect } from 'react-redux';\r\nimport SignedOutLinks from './SignedOutLinks';\r\n\r\nconst Navbar = (props) => {\r\n    const { auth, profile } = props;\r\n    const links = auth.uid ? <SignedInLinks profile={profile} /> : <SignedOutLinks />\r\n    return(\r\n        <nav className=\"nav-wrapper grey darken-3\">\r\n            <div className=\"container\">\r\n                <Link to=\"/\" className=\"brand-logo\">Icon.com</Link>\r\n                { links }\r\n            </div>\r\n        </nav>)\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log(state);\r\n    return {\r\n        auth: state.firebase.auth,\r\n        profile: state.firebase.profile\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Navbar);","import React from 'react';\r\n\r\nconst Notification = () => {\r\n    return(\r\n        <div className='section'>\r\n            <div className='card z-depth-0'>\r\n                <div className='card-content'>\r\n                    <span className='card-title'>Notifications</span>\r\n                    <ul>\r\n                        <li>Notifications</li>\r\n                        <li>Notifications</li>\r\n                        <li>Notifications</li>\r\n                        <li>Notifications</li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\n\r\nconst PostSummary = ({post}) => {\r\n    return(\r\n        <div className=\"card z-depth-0 post-summary\">\r\n            <div className=\"card-content grey-text text-darken-3\">\r\n                <span className=\"card-title\">{post.title}</span>\r\n                <p>Posted By {post.author}</p>\r\n                <p className=\"grey-text\">{post.createdAt.toDate().toString()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostSummary;","import React from 'react';\r\nimport PostSummary from './PostSummary';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PostList = ({posts}) => {\r\n    return(\r\n        <div className=\"post-list section\">\r\n            {/** If posts are available, then map through it, else dont. */}\r\n            {posts && posts.map((post) => {\r\n                return (\r\n                    <Link to={'/post/' + post.id} key={post.id}>\r\n                        <PostSummary post={post} />\r\n                    </Link>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostList;","import React, {Component} from 'react';\r\nimport Notification from './Notification';\r\nimport PostList from '../posts/PostList';\r\nimport { connect } from 'react-redux'\r\nimport { firestoreConnect } from 'react-redux-firebase'\r\nimport { compose } from 'redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass Dashboard extends Component{\r\n    render(){\r\n        //console.log(this.props);\r\n        const { posts, auth } = this.props;\r\n        //console.log(posts);\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n        return(\r\n            <div className=\"dashboard container\">\r\n                <div className=\"row\">\r\n                    {/** postlist component */}\r\n                    <div className=\"col s12 m6\">\r\n                        <PostList posts={posts}/>\r\n                    </div>\r\n                    {/** notification component */}\r\n                    <div className=\"col s12 m5 offset-m1\">\r\n                        <Notification />\r\n                    </div>\r\n                </div>\r\n            </div>        \r\n        )\r\n    }\r\n}\r\n// this maps the state from store to the props of the dashboard.\r\nconst mapStateToProps = (state) => {\r\n    console.log(state);\r\n    return {\r\n        posts: state.firestore.ordered.posts,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps),\r\n    firestoreConnect([\r\n        { collection: 'posts'}\r\n    ])\r\n)(Dashboard);","import React, { Component } from 'react';\r\nimport { createComments} from '../../store/actions/commentsAction';\r\nimport { connect } from 'react-redux';\r\nimport { likePost } from '../../store/actions/likeAction'\r\nimport { compose } from 'redux';\r\nimport { firestoreConnect } from 'react-redux-firebase';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass PostDetails extends Component {\r\n    state = {\r\n        content: '',\r\n        like: false\r\n    }\r\n    /*componentDidMount(){\r\n        setTimeout(() => {\r\n            console.log(this.props.post);            \r\n            //the setTimeOut delays this.props.likePost function so that the state will be set before it.\r\n            //we need to pass i the id so as to pass it in the likeAction\r\n            this.setState({\r\n                like: this.props.post.likes.includes('myId')\r\n            })\r\n        }, 1000);\r\n        \r\n    }*/\r\n    addLike = () => {\r\n        this.setState({\r\n            like: !this.state.like\r\n        });\r\n        const postId = this.props.match.params.id\r\n        //passing in only the like property of state\r\n        setTimeout(() => {\r\n            //the setTimeOut delays this.props.likePost function so that the state will be set before it.\r\n            //we need to pass i the id so as to pass it in the likeAction\r\n            // this.props.auth.uid is the current user Id which needs to be added to the like array in the likeAction\r\n            console.log(this.props.auth.uid);\r\n            this.props.likePost(this.state.like, postId, this.props.auth.uid)\r\n        }, 1);\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state.content);\r\n        const id = this.props.match.params.id;\r\n        //we need to pass i the id so as to know which post to store the comments in the commentsAction\r\n        //we can get the name of the person commenting from the profile object\r\n        this.props.createComments(this.state.content, id, this.props.currentUserProfile);\r\n    }\r\n    render () {\r\n        const { post, auth } = this.props;\r\n        //console.log(auth.uid);\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n        if(post){\r\n            return (\r\n                <div className=\"container section post-details\">\r\n                    <div className=\"card z-depth-0 content\">\r\n                        <div className=\"card-content\">\r\n                            <span className=\"card-title\"><bold>{post.title}</bold></span>\r\n                            <p className='flow-text'>{post.content}</p>\r\n                        </div>\r\n                        <div className=\"card-action grey lighten-4 grey-text\">\r\n                            <div>Posted By {post.author}</div>\r\n                            <div>{post.createdAt.toDate().toString()}</div>\r\n                            \r\n                        </div>\r\n                        <div className=\"card-action grey lighten-4\">\r\n                        <i onClick={this.addLike} class=\"material-icons\">{(this.state.like || post.likes.includes(auth.uid) ? 'favorite' : 'favorite_border')}</i><span className=\"noOfLikes\">{post.likes.length}</span>\r\n                            {\r\n                                post && post.comments.map((comment, index) => {\r\n                                    return (\r\n                                        <div key={index}>\r\n                                            <p>{comment.content}</p>\r\n                                            <p className='grey-text text-darken-5'><em> - {comment.author}</em></p>\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <label>Comments</label>\r\n                                <textarea id=\"comments\" cols=\"30\" rows=\"10\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\r\n                                <button className=\"btn\">Add Comments</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n                <div className=\"container center card-content\">\r\n                    <p>Loading .......</p>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, thisProps) => {\r\n    const id = thisProps.match.params.id;  \r\n    const posts = state.firestore.data.posts;\r\n    const post = posts ? posts[id] : null;\r\n    //console.log(post);\r\n    return {\r\n        post: post,\r\n        auth: state.firebase.auth,\r\n        currentUserProfile: state.firebase.profile,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createComments: (comment, id, currentUserProfile) => {\r\n            dispatch(createComments(comment, id, currentUserProfile));\r\n        },\r\n        likePost: (like, id, currentUserId) => {\r\n            dispatch(likePost(like, id, currentUserId));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    firestoreConnect([\r\n        { collection: 'posts'}\r\n    ])\r\n)(PostDetails);\r\n","\r\nexport const createComments = (comment, postId, currentUserProfile) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n        firestore.collection('posts').doc(postId).update({\r\n            comments: firebase.firestore.FieldValue.arrayUnion({\r\n                content: comment,\r\n                author: currentUserProfile.firstName + ' ' + currentUserProfile.lastName,\r\n                createdAt: new Date()})\r\n\r\n            // then fuction is fired only after the returned function is through \r\n            //with talk in to the database.\r\n        }).then(() => {\r\n            dispatch({type: 'CREATE_COMMENTS', comment: comment})\r\n        }).catch((err) => {\r\n            dispatch({type: 'CREATE_COMMENTS_ERR', err: err})            \r\n        })\r\n\r\n    }\r\n}","\r\nexport const likePost = (likeStatus, postId, currentUserId) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n        console.log(currentUserId);\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firebase = getFirebase();\r\n        const firestore = getFirestore();\r\n        firestore.collection('posts').doc(postId).update({\r\n            likes: (likeStatus ? firebase.firestore.FieldValue.arrayUnion(currentUserId) : firebase.firestore.FieldValue.arrayRemove(currentUserId))\r\n\r\n            // then fuction is fired only after the returned function is through \r\n            //with talk in to the database.\r\n        }).then(() => {\r\n            dispatch({type: 'LIKE_POST', like: likeStatus})\r\n        }).catch((err) => {\r\n            dispatch({type: 'LIKE_POST_ERR', err: err})            \r\n        })\r\n\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { signIn } from '../../store/actions/authAction';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass SignIn extends Component {\r\n    state = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state)\r\n        this.props.signIn(this.state);\r\n    }\r\n    render() {\r\n        //console.log(this.props);\r\n        const { authErr, auth } = this.props;\r\n        if (auth.uid) return <Redirect to='/' />\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Sign In</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">Login</button>\r\n                    </div>\r\n                    <div className='center red-text'>\r\n                        {\r\n                            authErr ? <p>{authErr}</p> : null\r\n                        }\r\n                    </div>\r\n                </form>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    //console.log(state);\r\n    return{\r\n        authErr: state.auth.authErr,\r\n        auth: state.firebase.auth\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n    return{\r\n        signIn: (params) => {\r\n            dispatch(signIn(params))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn)\r\n","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { signUp } from '../../store/actions/authAction';\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state)\r\n        this.props.signUp(this.state)\r\n    }\r\n    render() {\r\n        const { auth, authErr } = this.props;\r\n        if (auth.uid) return <Redirect to='/' />\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Sign Up</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"firstName\">First Name</label>\r\n                        <input type=\"text\" id=\"firstName\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"lastName\">Last Name</label>\r\n                        <input type=\"text\" id=\"lastName\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input type=\"email\" id=\"email\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input type=\"password\" id=\"password\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">SignUp</button>\r\n                    </div>\r\n                    <div className='center red-text'>\r\n                        {\r\n                            authErr ? <p>{authErr}</p> : null\r\n                        }\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        authErr: state.auth.authErr\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        signUp: (newUser) => {\r\n            dispatch(signUp(newUser))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp)\r\n","import React, { Component } from 'react'\r\nimport { createPosts } from '../../store/actions/postAction'\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\n\r\nclass CreatePost extends Component {\r\n    state = {\r\n        title: '',\r\n        content: ''\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        //console.log(this.state)\r\n        this.props.createPosts(this.state, this.props.currentUserProfile);\r\n        this.props.history.push('/');\r\n    }\r\n    render() {\r\n        const { auth } = this.props;\r\n        if (!auth.uid) return <Redirect to='/signin' />\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={this.handleSubmit} className=\"white\">\r\n                    <h5 className=\"grey-text text-darken-3\">Create New Post</h5>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <input type=\"text\" id=\"title\" onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <label htmlFor=\"content\">Post Content</label>\r\n                        <textarea id=\"content\" cols=\"30\" rows=\"10\" className=\"materialize-textarea\" onChange={this.handleChange}></textarea>\r\n                    </div>\r\n                    <div className=\"input-field\">\r\n                        <button className=\"btn pink lighten-1 z-depth-0\">Create</button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        createPosts: (post, currentUserProfile) => {\r\n            dispatch(createPosts(post, currentUserProfile))\r\n        }\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        auth: state.firebase.auth,\r\n        currentUserProfile: state.firebase.profile\r\n    }\r\n}\r\n\r\n//mapStateToProps is the first parameter of connect but we are not getting any state here\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreatePost);\r\n","export const createPosts = (post, currentUserProfile) => {\r\n    // because we've passed our configuration into the store enhancers at index.js,\r\n    //getFirebase and getFirestore know what to connect to.\r\n\r\n        //makkes async call to the database.\r\n    return (dispatch, getState, {getFirebase, getFirestore}) => {\r\n        const firestore = getFirestore();\r\n        firestore.collection('posts').add({\r\n            ...post,\r\n            comments:[],\r\n            likes: [],\r\n            author: currentUserProfile.firstName + ' ' + currentUserProfile.lastName,\r\n            createdAt: new Date()\r\n            // then fuction is fired only after the returned function is through \r\n            //with talk in to the database.\r\n        }).then(() => {\r\n            dispatch({type: 'CREATE_POSTS', post: post})\r\n        }).catch((err) => {\r\n            dispatch({type: 'CREATE_POSTS_ERR', err: err})            \r\n        })\r\n\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport Navbar from './components/layout/Navbar';\r\nimport Dashboard from './components/dashboard/Dashboard';\r\nimport PostDetails from './components/posts/PostDetails';\r\nimport SignIn from './components/auth/SignIn';\r\nimport SignUp from './components/auth/SignUp';\r\nimport CreatePost from './components/posts/CreatePost';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Navbar/>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Dashboard} />\r\n          <Route path=\"/post/:id\" component={PostDetails} />\r\n          <Route path=\"/signin\" component={SignIn} />\r\n          <Route path=\"/signup\" component={SignUp} />\r\n          <Route path=\"/create\" component={CreatePost} />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const initState = {\r\n    authErr: null\r\n}\r\n\r\nconst authReducer = (state = initState, action) => {\r\n    switch(action.type){\r\n        case 'LOGIN_ERROR':\r\n            console.log('Login Failed');\r\n            return{\r\n                ...state,\r\n                authErr: 'Login Failed'\r\n            }\r\n        case 'LOGIN_SUCCESS':\r\n            console.log('Login Passed');\r\n            return{\r\n                ...state,\r\n                authErr: null\r\n            }\r\n        case 'SIGNOUT_SUCCESS':\r\n            console.log('Signout Success');\r\n            return state\r\n        case 'SIGNUP_SUCCESS':\r\n            console.log('Signed Up Success');\r\n            return{\r\n                ...state,\r\n                authErr: null\r\n            }\r\n        case 'SIGNUP_ERROR':\r\n            console.log('signup failed');\r\n            return{\r\n                ...state,\r\n                authErr: action.err.message\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default authReducer;","const initState = {\r\n    posts: [  \r\n        {'id': 1, 'title': 'HeLLo', 'content': 'a thio ghyg dfer nfyjdm '},\r\n        {'id': 2, 'title': 'Worldo', 'content': 'a thio ghyg dfer nfyjdm '},\r\n        {'id': 3, 'title': 'Yeyh!!', 'content': 'a thio ghyg dfer nfyjdm '}\r\n    ]\r\n\r\n}\r\n\r\nconst postReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case 'CREATE_POSTS':\r\n            console.log('Created Posts', action.post);\r\n            return state;\r\n        case 'CREATE_POSTS_ERR':\r\n            console.log('Create Posts Error', action.err);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default postReducer;\r\n","const initState = {\r\n    comments: [  \r\n        {'id': 1, 'content': 'a thio ghyg dfer nfyjdm '},\r\n        {'id': 2, 'content': 'a thio ghyg dfer nfyjdm '},\r\n        {'id': 3, 'content': 'a thio ghyg dfer nfyjdm '}\r\n    ]\r\n\r\n}\r\n\r\nconst commentsReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case 'CREATE_COMMENTS':\r\n            console.log('Created', action.comment);\r\n            return state;\r\n        case 'CREATE_COMMENTS_ERR':\r\n            console.log('Create Posts Error', action.err);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default commentsReducer;\r\n","const initState = {\r\n    like: false\r\n}\r\n\r\nconst likeReducer = (state = initState, action) => {\r\n    switch (action.type){\r\n        case 'LIKE_POST':\r\n            console.log('Created like', action.like);\r\n            return state;\r\n        case 'LIKE_POST_ERR':\r\n            console.log('Create like Error', action.err);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default likeReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport postReducer from \"./postReducer\";\r\nimport commentsReducer from './commentsReducer';\r\nimport likeReducer from \"./likeReducer\";\r\n//this reducer is made for syncing our firestore data with the state in the background.\r\nimport { firestoreReducer } from 'redux-firestore'\r\nimport { firebaseReducer } from 'react-redux-firebase'\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    post: postReducer,\r\n    comment: commentsReducer,\r\n    like: likeReducer,\r\n    firestore: firestoreReducer,\r\n    firebase: firebaseReducer\r\n})\r\n\r\nexport default rootReducer;","import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth'\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBWTSejLucoeFsGe_BVMH_WqV2D37vEACo\",\r\n    authDomain: \"my-react-blog-44ca8.firebaseapp.com\",\r\n    databaseURL: \"https://my-react-blog-44ca8.firebaseio.com\",\r\n    projectId: \"my-react-blog-44ca8\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"1037862403870\",\r\n    appId: \"1:1037862403870:web:4dc3dedfb113bef6ae530f\",\r\n    measurementId: \"G-G9CX8YD6VS\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  //firebase.analytics();\r\n  firebase.firestore().settings({timestampsInSnapshots: true});\r\n\r\n  export default firebase;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducer from './store/reducers/rootReducer';\r\nimport { Provider } from 'react-redux';\r\n//thunk is middleware that halts dispatch action, performs async req and then resumes dispatch\r\nimport thunk from 'redux-thunk';\r\nimport { reduxFirestore, getFirestore} from 'redux-firestore';\r\nimport { reactReduxFirebase, getFirebase } from 'react-redux-firebase';\r\nimport fbConfig from './config/fbConfig';\r\n\r\n\r\n\r\nconst store = createStore(rootReducer, \r\n    compose(\r\n        //these are the store enhancers!!!\r\n        applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\r\n        //pass our config file to connect to the config\r\n        reduxFirestore(fbConfig),\r\n        //attachauthisready will allow us to access a method called firebaseAuthIsReady\r\n        //useFirestoreForProfile: true, userProfile: 'users', allows us to sync firebase profile to firestore users\r\n        reactReduxFirebase(fbConfig, { useFirestoreForProfile: true, userProfile: 'users', attachAuthIsReady: true })\r\n    )\r\n);\r\n\r\n//firebaseAuthIsReady waits for our app to check for authentication and then calls a callback function that renders our page\r\nstore.firebaseAuthIsReady.then(() => {\r\n    ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\r\n\r\n    // If you want your app to work offline and load faster, you can change\r\n    // unregister() to register() below. Note this comes with some pitfalls.\r\n    // Learn more about service workers: https://bit.ly/CRA-PWA\r\n    serviceWorker.unregister();\r\n\r\n})\r\n\r\n"],"sourceRoot":""}